apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'

    }
}

//buildToolsVersion '28.0.3'  compileSdkVersion 28   buildToolsVersion '28.0.3' targetSdkVersion 28 String SUPPORT_LIBS_VERSION = '28.0.0'
final String SUPPORT_LIBS_VERSION = '28.0.0'
final String ANDROID_TOP = "${rootDir}"
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId 'com.suding.launcher3'
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.2.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //修改依赖优先级
    preBuild {
        doLast {
            def imlFile = file(project.name + ".iml")
            println 'Change ' + project.name + '.iml order'
            try {
                def parsedXml = (new XmlParser()).parse(imlFile)
                def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
                parsedXml.component[1].remove(jdkNode)
                def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
                new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
                groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
            } catch (FileNotFoundException e) {
            }
        }
    }
    //==================================================================


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    productFlavors {
        aosp {
            dimension "default"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

        l3go {
            dimension "default"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

        quickstep {
            dimension "default"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

        //增加路知音定制UI类型  2021 08 04
        luzhiyin {
            dimension "default"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }
    }

    // Disable release builds for now
    android.variantFilter { variant ->
        if (variant.buildType.name.endsWith('release')) {
            variant.setIgnore(true);
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
                //以下为单独添加
                include '**/*.proto'
            }
        }

        debug {
            manifest.srcFile "AndroidManifest.xml"
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', "src_ui_overrides"]
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src_flags', "src_ui_overrides"]
            manifest.srcFile "go/AndroidManifest.xml"
        }

        quickstep {
            res.srcDirs = ['quickstep/res']
            java.srcDirs = ['src_flags', 'quickstep/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        //路知音
        luzhiyin {
            res.srcDirs = ['quickstep/res']
            java.srcDirs = ['src_flags', 'quickstep/src', 'luzhiyin']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

    }
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/jcenter' }
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
}
allprojects {
//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            options.compilerArgs.add('-Xbootclasspath/p:libs/framework.jar')
//        }
//    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            Set<File> fileSet = options.bootstrapClasspath.getFiles()
            List<File> newFileList =  new ArrayList<>();
            newFileList.add(new File("libs/framework.jar"))
            newFileList.addAll(fileSet)
            options.bootstrapClasspath = files(
                    newFileList.toArray()
            )
        }
    }
}

dependencies {
   // quickstepImplementation fileTree(dir: 'quickstep/libs', include: ['*.jar','*.aar'])
    implementation "com.android.support:support-v4:${SUPPORT_LIBS_VERSION}"
    implementation "com.android.support:support-dynamic-animation:${SUPPORT_LIBS_VERSION}"
    implementation "com.android.support:recyclerview-v7:${SUPPORT_LIBS_VERSION}"
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.2.0rc2'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation files('quickstep\\libs\\MainSDK1.0.0.jar')
    implementation files('quickstep\\libs\\CarsysoBTSDKClient.jar')
    implementation files('libs\\MirrorSupport.jar')
    implementation files('quickstep\\libs\\sysui_shared.jar')

    //implementation files('quickstep\\libs\\sysui_shared.jar')

    quickstepImplementation fileTree(dir: "quickstep/libs", include: 'sysui_shared.jar')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.mockito:mockito-core:3.11.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation "com.android.support:support-annotations:${SUPPORT_LIBS_VERSION}"

}

protobuf {
    //  Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }

}
